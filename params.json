{"name":"Echonest-ruby-api","tagline":"A ruby wrapper around the Echonest API","body":"# echonest-ruby-api [![Code Climate](https://codeclimate.com/github/maxehmookau/echonest-ruby-api.png)](https://codeclimate.com/github/maxehmookau/echonest-ruby-api) [![Build Status](https://travis-ci.org/maxehmookau/echonest-ruby-api.png)](https://travis-ci.org/maxehmookau/echonest-ruby-api) [![Dependency Status](https://gemnasium.com/maxehmookau/echonest-ruby-api.png)](https://gemnasium.com/maxehmookau/echonest-ruby-api)\r\n\r\n\r\n![Echonest] (http://the.echonest.com/static/img/logos/250x80_lt.gif)\r\n\r\n**echonesst-ruby-api** is a pure Ruby wrapper around the Echonest APIs. \r\n\r\n## Requirements\r\n* An API Key (available free)\r\n* Ruby 1.9.3+\r\n* [echonest/echoprint-codegen](https://github.com/echonest/echoprint-codegen) binary in your `$PATH` if you want to identify audio files. (yeah, *identify!*)\r\n\r\n## Installation\r\n\r\nIn your Gemfile:\r\n\r\n    gem 'echonest-ruby-api'\r\n    \r\nand then `bundle install`\r\n\r\nOr install locally:\r\n\r\n    $ (sudo) gem install echonest-ruby-api\r\n\r\n\r\n## Usage\r\n\r\nRequire the gem in your file:\r\n\r\n    require 'echonest-ruby-api'\r\n\r\n## Artist\r\n\r\nCreate an instance of an object\r\n\r\n    artist = Echonest::Artist.new('Weezer', 'YOUR-API-KEY')\r\n\r\nThen you have access to a bunch of methods:\r\n\r\n    artist.name\r\n    artist.biographies\r\n    artist.blogs\r\n    artist.familiarity\r\n    artist.hotttnesss\r\n    artist.images\r\n    artist.songs\r\n    \r\n*Exact response are specified in the RDoc  but the method names try to be as self-explanatory as possible.*\r\n\r\n## Song\r\n\r\nCreate an instance of the Song module.\r\n\r\n    song = Echonest::Song.new('YOUR-API-KEY')\r\n\r\nThen you have access to the song/search endpoint:\r\n*(this is where it gets clever)*\r\n\r\n    params = { mood: \"sad^.5\", results: 10, min_tempo: 130, max_tempo: 150 }\r\n    song.search(params)\r\n\r\nSee the full list of params [here](http://developer.echonest.com/docs/v4/song.html#search)\r\n\r\n## Identification\r\n\r\n> **Note:** This stuff is flakey as hell. Seems to work pretty well on OSX, but it doesn't work out of the box. You'll need to follow these instructions to get it working.\r\n\r\nYou can even **identify** a song simply from its fingerprint! Support for this is flaky so far and only tested on OS X.\r\n\r\nFirstly, make sure that the `echoprint-codegen` binary is available on your local `$PATH`. \r\n    \r\nJust run: `echoprint-codegen` on the terminal and see if it returns anything other than an error.\r\n    \r\nIf it's not installed, you'll need to compile it from source. **It's not as scary as it sounds.**\r\n\r\n\r\n    brew install ffmpeg boost taglib # Install dependencies\r\n    \r\n    cd ~/Desktop/ # or somewhere else sensible, you can delete it later anyway\r\n    \r\n    git clone https://github.com/echonest/echoprint-codegen.git\r\n    \r\n    cd echoprint-codegen\r\n    \r\n    make\r\n    \r\n    make install\r\n    \r\nThis should then allow you to use the `echoprint-codegen` command at the command line. If not, try following the instructions here: [echonest/echoprint-codegen](https://github.com/echonest/echoprint-codegen)\r\n\r\nThen just use this method call:\r\n\r\n    song = Echonest::Song.new('YOUR-API-KEY')\r\n    code = song.echoprint_code('path/to/audio/file')\r\n    puts code.identify(code)\r\n\r\nIf there's a positive match, it'll return something like this:\r\n\r\n    {\r\n      \"response\": {\r\n            \"status\": {\r\n            \"code\": 0,\r\n            \"message\": \"Success\",\r\n            \"version\": \"4.2\"\r\n          },\r\n          \"songs\": [\r\n          {\r\n            \"title\": \"Billie Jean\",\r\n            \"artist_name\": \"Michael Jackson\",\r\n            \"artist_id\": \"ARXPPEY1187FB51DF4\",\r\n            \"score\": 49,\r\n            \"message\": \"OK (match type 5)\",\r\n            \"id\": \"SOKHYNL12A8C142FC7\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\nCheckout `spec/song_spec.rb` for an example code to test it out. \r\n\r\nNote that this calls the song/identify API endpoint and does *not* support other Echoprint servers.\r\n\r\n## Testing\r\n\r\nTesting is done using RSpec. Just run `guard` in the root directory and it'll run the tests automatically. Use `vcr` to mock responses from the Echonest servers.\r\n\r\n## Contributors\r\n\r\nMax Woolf (me!)\r\nabdyer\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}